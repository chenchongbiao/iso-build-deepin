#!/bin/bash

set -u

function generate_isolinux_cfg() {
    sudo tee $ISOLINUX_CFG <<EOF
UI vesamenu.c32

MENU TITLE Boot Menu
DEFAULT linux
TIMEOUT 600
MENU RESOLUTION 640 480
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std
MENU COLOR help         37;40   #c0ffffff #a0000000 std
MENU COLOR timeout_msg  37;40   #80ffffff #00000000 std
MENU COLOR timeout      1;37;40 #c0ffffff #00000000 std
MENU COLOR msg07        37;40   #90ffffff #a0000000 std
MENU COLOR tabmsg       31;40   #30ffffff #00000000 std

LABEL linux
  MENU LABEL deepin Live [BIOS/ISOLINUX]
  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd boot=live

LABEL linux
  MENU LABEL deepin Live [BIOS/ISOLINUX] (nomodeset)
  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd boot=live nomodeset"
EOF
}

function generate_grub_cfg() {
    sudo tee $GRUB_CFG <<EOF
search --set=root --label deepin

set default="0"
set timeout=30

# If X has issues finding screens, experiment with/without nomodeset.

menuentry 'deepin Live [EFI/GRUB]' {
    insmod all_video
    set gfxpayload=keep
    linux (\$root)/live/vmlinuz boot=live union=overlay locales=$LOCALES console=tty splash --
    initrd (\$root)/live/initrd
}

menuentry 'deepin Live [EFI/GRUB] (nomodeset)' {
    insmod all_video
    set gfxpayload=keep
    linux (\$root)/live/vmlinuz boot=live union=overlay locales=$LOCALES console=tty splash -- nomodeset
    initrd (\$root)/live/initrd
}
EOF
}

function generate_grub_standalone_cfg() {
    run_command_in_chroot "
cat > $GRUB_STANDALONE_CFG <<'EOF'
search --set=root --label deepin
set prefix=(\$root)/boot/grub/
configfile /boot/grub/grub.cfg
EOF
"
}
function generate_efi_file() {
    if [[ $(uname -m) != $(run_command_in_chroot "uname -m") ]];
    then
        # 异架构构建，拷贝构建好的二进制。
        cp $DEVICE_CONFIG_PATH/$BOOT_EFI_FILE $STAGING/EFI/boot
    else
        # 创建一个独立的GRUB2 EFI可执行文件
    run_command_in_chroot "grub-mkstandalone \
        --format=$ARCH_EFI \
        --output=$BOOT_EFI_FILE \
        --locales="" \
        --fonts="" \
        boot/grub/grub.cfg=$GRUB_STANDALONE_CFG"
    mv $TMP/$BOOT_EFI_FILE $STAGING/EFI/boot
    fi
}

function generate_efi_img() {
    # 创建一个EFI系统分区镜像文件
    EFI_BOOT_IMG="$STAGING/boot/efi.img"
    dd if=/dev/zero of=$EFI_BOOT_IMG bs=1M count=4
    /sbin/mkfs.vfat $EFI_BOOT_IMG
    mmd -i $EFI_BOOT_IMG efi efi/boot
    sudo fatlabel $EFI_BOOT_IMG ESP
    mcopy -vi $EFI_BOOT_IMG $STAGING/EFI/boot/$BOOT_EFI_FILE ::efi/boot/
}

function generate_iso() {
    xorriso \
        -as mkisofs \
        -r \
        -iso-level 3 \
        -o $ISO \
        -no-pad \
        -full-iso9660-filenames \
        -V "deepin" \
        -isohybrid-mbr $TMP/isohdpfx.bin \
        -appended_part_as_gpt \
        -iso_mbr_part_type 'default' \
        -c '/boot.catalog' \
        -eltorito-boot isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        --eltorito-catalog isolinux/isolinux.cat \
        -eltorito-alt-boot \
        -e /boot/efi.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -isohybrid-apm-hfsplus \
        $STAGING
}

export -f generate_isolinux_cfg generate_grub_cfg generate_grub_standalone_cfg generate_efi_file generate_efi_img generate_iso