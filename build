#!/bin/bash

set -eux

source tools/chroot

source tools/install_tool

# 初始化变量
WORKDIR="$(pwd)"
ARCH=$1
DISTRO_VERSION="crimson"
DISTRO_NAME="deepin"
SOURCES_FILE="config/sources.list"
ROOTFS=$WORKDIR/cache/rootfs/$DISTRO_NAME-$DISTRO_VERSION-$ARCH
ISO=$WORKDIR/output/$DISTRO_NAME-$DISTRO_VERSION-$ARCH.iso
readarray -t REPOS < $SOURCES_FILE
PACKAGE_FILE="config/base_package.txt"
PACKAGES=$(cat $PACKAGE_FILE | grep -v "^-" | xargs | sed -e 's/ /,/g')
DEVICE_CONFIG_PATH=$WORKDIR/arch/$ARCH
STAGING=$WORKDIR/cache/staging
TMP=$WORKDIR/cache/tmp
LOCALES=${LOCALES:-en-US.UTF-8}

# 初始化操作
source tools/init

# 创建根文件系统
if [[ ! -d "$ROOTFS" ]]; then
    source tools/rootfs
    build_rootfs

    MOUNT_DIR=$ROOTFS
    setup_chroot_environment

    run_command_in_chroot "apt update -y"
    PACKAGES=$(cat config/desktop_package.txt | xargs)
    # 这里有个 dde-services 和 deepin-service-plugins 冲突问题，用 || true 先跳过
    install_packages "$PACKAGES" || true
    # 安装错误后需要重新配置下
    run_command_in_chroot "dpkg --configure -a"

    PACKAGES=$(cat $DEVICE_CONFIG_PATH/config/package.txt | xargs)
    install_packages "$PACKAGES"

    echo "$DISTRO_NAME-$ARCH" | sudo tee $ROOTFS/etc/hostname

    run_command_in_chroot "systemctl enable lightdm"

    clear_cache
    umount_chroot
fi

sudo cp -a $ROOTFS/* $TMP

case $ARCH in
"amd64")
    ARCH_EFI="x86_64-efi"
    BOOT_EFI_FILE="bootx64.efi"
    ;;
"arm64")
    ARCH_EFI="arm64-efi"
    BOOT_EFI_FILE="bootaa64.efi"
    ;;
"loongarch64")
    ARCH_EFI="loongarch64-efi"
    BOOT_EFI_FILE="bootloongarch64.efi"
    ;;
esac
mkdir -p $STAGING/boot/grub/${ARCH_EFI}

# 拷贝 BootLoader 文件
cp $TMP/usr/lib/ISOLINUX/isolinux.bin $STAGING/isolinux
cp $TMP/usr/lib/syslinux/modules/bios/* $STAGING/isolinux

cp -r $TMP/usr/lib/grub/$ARCH_EFI/* $STAGING/boot/grub/$ARCH_EFI

cp $TMP/boot/vmlinuz-* $STAGING/live/vmlinuz
cp $TMP/boot/initrd.img-* $STAGING/live/initrd

export MOUNT_DIR=$TMP
setup_chroot_environment

# 添加 grub-efi 离线包，chroot 进入根文件系统下载，根据缺少的包进行下载。
source tools/deb
downloaded_dir="/tmp/deb"
run_command_in_chroot "mkdir -p $downloaded_dir"
offline_packages="grub-efi"
[[ "$ARCH" == "amd64" ]] && offline_packages+=" grub-pc"
download_offline_debs
run_command_in_chroot "rm -rf $downloaded_dir/{lock,partial}"
sudo mv $TMP/$downloaded_dir $STAGING
clear_cache
umount_chroot

sudo mksquashfs \
    "$TMP/"* \
    $STAGING/live/filesystem.squashfs

source tools/iso
ISOLINUX_CFG="$STAGING/isolinux/isolinux.cfg"
generate_isolinux_cfg

GRUB_CFG="$STAGING/boot/grub/grub.cfg"
generate_grub_cfg

GRUB_STANDALONE_CFG="grub-standalone.cfg"
generate_grub_standalone_cfg

MOUNT_DIR=$TMP
generate_efi_file

# 创建一个EFI系统分区镜像文件
generate_efi_img

[[ -f $ISO ]] && rm $ISO
cp $TMP/usr/lib/ISOLINUX/isohdpfx.bin $TMP
generate_iso
